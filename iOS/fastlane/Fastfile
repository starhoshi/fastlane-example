fastlane_version "2.19.2"

default_platform :ios

import_from_git(
  url: 'https://github.com/classi/fastlane-example',
  path: 'Util/Fastfile'
)

platform :ios do
  changelog = ""
  default_payloads = [:lane, :test_result, :git_branch, :git_author]
  keychain = {name: "name", password: "password"}

  before_all do
    ENV['DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS'] = '-t DAV'

    changelog = changelog_from_git_commits_hs

    if is_ci?
   #   sh("rm /Users/distiller/Library/Keychains/#{keychain[:name]}-db || echo")
      
      setup_ci(
        force: true,
        provider: "travis",
      )

   #   create_keychain(
   #     name: keychain[:name],
   #     password: keychain[:password],
   #     default_keychain: true,
   #     unlock: true,
   #     timeout: 3600,
   #     lock_when_sleeps: false
   #   )
    end
  end


  desc "Runs all the tests"
  lane :test do
    scan
    xcov(
      workspace: ENV["XCOV_WORKSPACE"],
      scheme: ENV["XCOV_SCHEME"],
      exclude_targets: ENV["XCOV_EXCLUDE_TARGETS"]
    )
    danger
  end


  desc "Deploy a new version to the Crashlytics Beta"
  lane :beta do
    # Download and install certificate
    if is_ci?
      match(type: ENV["BETA_MATCH_TYPE"], force_for_new_devices: true, keychain_name: keychain[:name], keychain_password: keychain[:password])
    else
      match(type: ENV["BETA_MATCH_TYPE"], force_for_new_devices: true)
    end

    # Update build number
    increment_build_number(build_number: "0.#{Time.now.strftime("%Y%m%d%H%M")}")

    # Change application icon to beta version
    badge(dark: true)

    # Compile
    gym(export_method: "development", configuration: "Debug", export_options: { compileBitcode: false })

    # Save ipa and dSYM
    if is_ci?
      sh "cp #{lane_context[SharedValues::IPA_OUTPUT_PATH]} $CIRCLE_ARTIFACTS"
      sh "cp #{lane_context[SharedValues::DSYM_OUTPUT_PATH]} $CIRCLE_ARTIFACTS"
    end

    # Upload ipa to crashslytics
    crashlytics(
      crashlytics_path: "Pods/Crashlytics/iOS/Crashlytics.framework",
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      ipa_path: lane_context[SharedValues::IPA_OUTPUT_PATH],
      notes: changelog,
      groups: ENV["CRASHLYTICS_GROUPS"]
    )

    # Upload dSYM to crashslytics
    upload_symbols_to_crashlytics

    # notify slack
    payload = {"Git Commit" => changelog}
    payload["Circle Artifacts Url"] = ENV["CIRCLE_BUILD_URL"] + "#artifacts/containers/0" if is_ci?
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: ":crashlytics: Beta App successfully released!",
      payload: payload,
      default_payloads: default_payloads
    )
  end


  desc "Deploy a new version to the App Store"
  lane :release do
    # Download and install certificate
    if is_ci?
      match(type: "appstore", git_url: ENV["GITHUB_CERTIFICATES_REPO"])
    else
      match(type: "appstore")
    end

    # Update build number
    increment_build_number(build_number: "#{Time.now.strftime("%Y%m%d%H%M")}")

    # Compile
    gym(scheme: ENV["RELEASE_GYM_SCHEME"])

    # Save ipa and dSYM
    if is_ci?
      sh "cp #{lane_context[SharedValues::IPA_OUTPUT_PATH]} $CIRCLE_ARTIFACTS"
      sh "cp #{lane_context[SharedValues::DSYM_OUTPUT_PATH]} $CIRCLE_ARTIFACTS"
    end

    # Upload ipa to iTunes Connect
    deliver

    # Upload dSYM to crashslytics
    upload_symbols_to_crashlytics
    
    # Upload dSYM to iTunesConnect
    upload_latest_dsyms

    # Get diff from the last tag
    sh("git tag -d v#{get_version_number} || echo")
    diff = git_tag_diff

    # Create git tag
    # Force pushing because it may create the same tag more than once.
    add_git_tag(
      tag: "v#{get_version_number}",
      message: "build_number: #{get_build_number} by fastlane\n\n#{diff}",
      force: true
    )
    push_git_tags(force: true)

    # notify slack
    payload = {"Git Commit" => changelog}
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: ":itunesconnect: Successfully uploaded a new App Store build",
      payload: payload,
      default_payloads: default_payloads
    )
  end
  
  lane :upload_latest_dsyms do
    download_dsyms(version: "latest")
    upload_symbols_to_crashlytics
    clean_build_artifacts
  end

  desc "Download dSYMs from iTunesConnect and upload to crashylitics"
  lane :refresh_dsyms do
    download_dsyms
    upload_symbols_to_crashlytics
    clean_build_artifacts

    slack(
      message: "Successfully uploaded dSYMs to :crashlytics:",
      payload: {
        "Circle Build Url" => ENV["CIRCLE_BUILD_URL"]
      }
    )
  end


  desc "Update app_version and create release branch in GitHub"
  desc "ex: fastlane release_branch version:1.0.0"
  lane :release_branch do |options|
    # Check arguments
    UI.user_error!("Required release version. ex: fastlane release_branch version:1.0.0") unless options[:version]
    branch = "release/#{options[:version]}"

    # Create release branch
    sh("git checkout master && git pull origin master")
    sh("git checkout -b #{branch}")

    # Update version_number and git commit
    increment_version_number(version_number: options[:version])
    commit_version_bump(
      message: "Create #{branch} branch.",
      xcodeproj: ENV["XCODEPROJ"]
    )

    # Push to GitHub and create Pull Reqeust
    push_to_git_remote
    create_pull_request(
      repo: ENV["GITHUB_REPOSITORY"],
      title: "#{branch}",
      body: "release v#{options[:version]}"
    )
  end

  
  desc "frameit"
  lane :screenshots do
    frameit(path: './fastlane/screenshots/', white: true)
    Dir.glob('./fastlane/screenshots/**/*.png') do |png|
      if !png.include?('framed')
        File.delete(png)
      end
    end
  end


  error do |lane, exception|
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: exception.message,
      success: false,
      payload: {
        "Circle Build Url" => ENV["CIRCLE_BUILD_URL"]
      }
    )
  end


  after_all do
    reset_diff
  end
end

